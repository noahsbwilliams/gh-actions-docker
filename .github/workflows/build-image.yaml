# This workflow assumes a Dockerfile in the root of the repository.
# See more customization options here: https://github.com/docker/build-push-action

name: Build image

on:
  push:
    branches:
      - 'main'

jobs:
  docker-build:
    name: Build Docker image and push to registries
    runs-on: ubuntu-latest
    steps:
      - name: ⚙️🐳 Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: ⚙️🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: ℹ️🐳 Set metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/namespace/image
          # ⬆️ for GitHub Container Registry
          # hub.docker.com/username/image
          # ⬆️ for Docker Hub
          # registry.tld/namespace/image
          # ⬆️ for any container registry
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
          # type=sha     Would tag the image with `sha-blahblahblah`
          # type=sha,prefix={{branch}}-  Would tag the image with `gitbranch-blahblah`
          flavor: |
            latest=true
          # Set to 'auto' if you want to stop tagging
          # the most recent image as `latest`.
      - name: 🪵🐙 Login to GitHub Container Registry
        id: login-ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔨🐳 Build ➡️ Push to registries
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          # ⬆️ auto-push to the registry.tld/namespace/image
          # the images are tagged with
          labels: ${{ steps.meta.outputs.labels }}
          platforms: |
            linux/amd64
            linux/arm64

      - name: ℹ️🐳 Display image digest
        run: echo ${{ steps.docker_build.outputs.digest }}